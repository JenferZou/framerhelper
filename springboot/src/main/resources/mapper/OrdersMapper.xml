<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.OrdersMapper">
    <!--${}、#{}等是参数占位符，它们会被传递给方法的参数值所替换。然后，可以在Java代码中使用这个映射文件来执行相应的数据库操作。-->
    <!--#{}会为花括号内的变量加一对单引号；而${}不会，是直接传参-->
    <!--这段代码是一个XML片段，通常用于MyBatis或类似的ORM框架中。它定义了一个名为"Base_Column_List"的SQL片段，列出了从一个数据库表中查询时需要包含的列。
    <sql id="Base_Column_List">: 这一行定义了一个SQL片段，并给它一个ID "Base_Column_List"。这个ID可以在其他地方引用，例如在查询映射中。
    id, goods_id, user_id, order_id, time, price, status: 这些是数据库表中的列名。在这个SQL片段中，它们被列出，表示在执行查询时需要包含这些列。
    这段代码的目的是为了方便地引用一个固定的列列表，而不是每次都需要重新列出这些列名。通过这种方式，如果表的结构发生变化（例如添加或删除列），只需要修改这个SQL片段，而不是搜索整个项目来更新所有引用这些列的地方。-->
    <sql id="Base_Column_List">
        id,goods_id,user_id,order_id,time,price,status
    </sql>

    <!--定义一个查询操作，从"orders"表中选取所有列，但只返回满足特定条件的记录（基于id和orderId），并按照"id"降序排列。
    /*定义了一个名为"selectAll"的查询操作，并指定了返回的结果类型为com.example.entity.Orders。*/
    /*SQL的SELECT关键字*/
    /*使用了 include标签 来引用之前定义的"Base_Column_List"。这样，你可以重用列的列表，如果以后更改了列的顺序或添加/删除列，你只需要在一个地方进行更改。*/
    /*这个标签用于构建SQL的WHERE子句。它确保了只有在其内部的条件都满足时，才会生成WHERE子句。*/
    /*这是一个条件判断。只有当变量id不为null时，才会添加AND id= #{id}到WHERE子句中。*/
     /*同样是一个条件判断。只有当变量orderId不为null时，才会添加AND order_id = #{orderId}到WHERE子句中。*/
     /*指定了查询结果的排序方式，按照"id"列降序排列。*/
    -->
    <select id="selectAll" resultType="com.example.entity.Orders">
        select
        <include refid="Base_Column_List" />
        from orders
        <where>
            <if test="id != null"> and id= #{id}</if>
            <if test="orderId != null"> and order_id = #{orderId}</if>
            <if test="status != null"> and status = #{status}</if>
            <if test="userId != null"> and user_id = #{userId}</if>
        </where>
        order by id desc
    </select>

    <!--定义了一个查询操作，从"orders"表中选取所有列，但只返回满足特定ID的记录，并按照在"Base_Column_List"中定义的列顺序返回结果。
    /*这指定了查询的条件，即只选取"id"列等于给定值的记录。*/
    -->
    <select id="selectById" resultType="com.example.entity.Orders">
        select
        <include refid="Base_Column_List" />
        from orders
        where id = #{id}
    </select>

    <!--定义了一个删除操作，从"orders"表中删除具有特定ID的记录。
     /*这是删除的条件，即只删除"id"列等于给定值的记录。*/
    -->
    <delete id="deleteById">
        delete from orders
        where  id = #{id}
    </delete>

    <!--定义了一个插入操作，它根据传入的参数（一个类型为"com.example.entity.Orders"的对象）动态地构建SQL的INSERT语句，
    并插入记录到"orders"表中。
    如果某些字段的值为null，它们将不会被包含在INSERT语句中。-->
    <!--    定义了一个名为"insert"的插入操作，并指定了参数类型为com.example.entity.Orders。useGeneratedKeys="true"表示启用自动生成的主键。
    开始一个修剪操作，用于处理列名和值列表中的逗号。
    如果IDEA的值列表id不为null，则添加id,到数据库列名列表中。
     这一部分的修剪操作结束，将生成的列名列表添加到SQL语句中。
     这一行开始另一个修剪操作，用于处理值列表中的逗号。
     如果id不为null，则添加#{id},到值列表中。
      这一部分的修剪操作结束，将生成的列名列表添加到SQL语句中。
    -->
    <insert id="insert" parameterType="com.example.entity.Orders" useGeneratedKeys="true">
        insert into orders
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">id,</if>
                <if test="goodsId != null">goods_id,</if>
                <if test="userId != null">user_id,</if>
                <if test="orderId != null">order_id,</if>
                <if test="time != null">time,</if>
                <if test="price != null">price,</if>
                <if test="status != null">status,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">#{id},</if>
                <if test="goodsId != null">#{goodsId},</if>
                <if test="userId != null">#{userId},</if>
                <if test="orderId != null">#{orderId},</if>
                <if test="time != null">#{time},</if>
                <if test="price != null">#{price},</if>
                <if test="status != null">#{status},</if>
        </trim>
    </insert>

    <!--定义了一个更新操作，它会根据传入的Orders对象更新"orders"表中对应记录的列。只有当对象的属性不为null时，相应的列才会被更新。
     /*这一行定义了一个名为"updateById"的更新操作，并指定了参数类型为com.example.entity.Orders。*/
      /*这一标签用于指定要更新的列*/
      /*这是一个条件判断，只有当goodsId不为null时，才会执行下面的代码。*/
        /*如果上面的条件满足，这行代码会更新"goods_id"列的值为传入的goodsId。*/
         /*同样地，其他 if 标签也是基于不同的字段是否为null来决定是否更新相应的列。*/
          /*这一部分结束，表示要更新的列已经指定完毕。*/
          /*这是UPDATE语句的WHERE子句，用于指定哪些记录应该被更新。在这里，它只更新"id"列等于传入的id值的记录。*/
    -->
    <update id="updateById" parameterType="com.example.entity.Orders">
        update orders
        <set>
            <if test="goodsId != null">
                goods_id = #{goodsId},
            </if>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="orderId != null">
                order_id = #{orderId},
            </if>
            <if test="time != null">
                time = #{time},
            </if>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id} 
    </update>

</mapper>